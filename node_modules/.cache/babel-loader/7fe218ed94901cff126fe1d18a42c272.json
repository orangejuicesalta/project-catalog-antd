{"ast":null,"code":"import \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { getPosition, isTreeNode } from '../util';\nimport { warning } from '../../vc-util/warning';\nimport { camelize } from 'vue';\nimport { filterEmpty } from '../../_util/props-util';\nimport omit from '../../_util/omit';\nexport function getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n\n  return pos;\n}\nexport function fillFieldNames(fieldNames) {\n  var _ref = fieldNames || {},\n      title = _ref.title,\n      _title = _ref._title,\n      key = _ref.key,\n      children = _ref.children;\n\n  var mergedTitle = title || 'title';\n  return {\n    title: mergedTitle,\n    _title: _title || [mergedTitle],\n    key: key || 'key',\n    children: children || 'children'\n  };\n}\n/**\n * Warning if TreeNode do not provides key\n */\n\nexport function warningWithoutKey(treeData, fieldNames) {\n  var keys = new Map();\n\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode[fieldNames.key];\n      var children = treeNode[fieldNames.children];\n      warning(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      warning(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n\n  dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\n\nexport function convertTreeToData(rootNodes) {\n  function dig() {\n    var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var treeNodes = filterEmpty(node);\n    return treeNodes.map(function (treeNode) {\n      var _a, _b, _c, _d; // Filter invalidate node\n\n\n      if (!isTreeNode(treeNode)) {\n        warning(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n\n      var slots = treeNode.children || {};\n      var key = treeNode.key;\n      var props = {};\n\n      for (var _i = 0, _Object$entries = Object.entries(treeNode.props); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            k = _Object$entries$_i[0],\n            v = _Object$entries$_i[1];\n\n        props[camelize(k)] = v;\n      }\n\n      var isLeaf = props.isLeaf,\n          checkable = props.checkable,\n          selectable = props.selectable,\n          disabled = props.disabled,\n          disableCheckbox = props.disableCheckbox; // 默认值为 undefined\n\n      var newProps = {\n        isLeaf: isLeaf || isLeaf === '' || undefined,\n        checkable: checkable || checkable === '' || undefined,\n        selectable: selectable || selectable === '' || undefined,\n        disabled: disabled || disabled === '' || undefined,\n        disableCheckbox: disableCheckbox || disableCheckbox === '' || undefined\n      };\n\n      var slotsProps = _extends(_extends({}, props), newProps);\n\n      var _props$title = props.title,\n          title = _props$title === void 0 ? (_a = slots.title) === null || _a === void 0 ? void 0 : _a.call(slots, slotsProps) : _props$title,\n          _props$icon = props.icon,\n          icon = _props$icon === void 0 ? (_b = slots.icon) === null || _b === void 0 ? void 0 : _b.call(slots, slotsProps) : _props$icon,\n          _props$switcherIcon = props.switcherIcon,\n          switcherIcon = _props$switcherIcon === void 0 ? (_c = slots.switcherIcon) === null || _c === void 0 ? void 0 : _c.call(slots, slotsProps) : _props$switcherIcon,\n          rest = __rest(props, [\"title\", \"icon\", \"switcherIcon\"]);\n\n      var children = (_d = slots[\"default\"]) === null || _d === void 0 ? void 0 : _d.call(slots);\n\n      var dataNode = _extends(_extends(_extends({}, rest), {\n        title: title,\n        icon: icon,\n        switcherIcon: switcherIcon,\n        key: key,\n        isLeaf: isLeaf\n      }), newProps);\n\n      var parsedChildren = dig(children);\n\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n\n      return dataNode;\n    });\n  }\n\n  return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\n\nexport function flattenTreeData(treeNodeList, expandedKeys, fieldNames) {\n  var _fillFieldNames = fillFieldNames(fieldNames),\n      fieldTitles = _fillFieldNames._title,\n      fieldKey = _fillFieldNames.key,\n      fieldChildren = _fillFieldNames.children;\n\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = getPosition(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode[fieldKey], pos); // Pick matched title in field title list\n\n      var mergedTitle;\n\n      for (var i = 0; i < fieldTitles.length; i += 1) {\n        var fieldTitle = fieldTitles[i];\n\n        if (treeNode[fieldTitle] !== undefined) {\n          mergedTitle = treeNode[fieldTitle];\n          break;\n        }\n      } // Add FlattenDataNode into list\n\n\n      var flattenNode = _extends(_extends({}, omit(treeNode, [].concat(_toConsumableArray(fieldTitles), [fieldKey, fieldChildren]))), {\n        title: mergedTitle,\n        key: mergedKey,\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat(_toConsumableArray(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat(_toConsumableArray(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n\n      flattenList.push(flattenNode); // Loop treeNode children\n\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode[fieldChildren] || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n\n      return flattenNode;\n    });\n  }\n\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\n\nexport function traverseDataNodes(dataNodes, callback, // To avoid too many params, let use config instead of origin param\nconfig) {\n  var mergedConfig = {};\n\n  if (_typeof(config) === 'object') {\n    mergedConfig = config;\n  } else {\n    mergedConfig = {\n      externalGetKey: config\n    };\n  }\n\n  mergedConfig = mergedConfig || {}; // Init config\n\n  var _mergedConfig = mergedConfig,\n      childrenPropName = _mergedConfig.childrenPropName,\n      externalGetKey = _mergedConfig.externalGetKey,\n      fieldNames = _mergedConfig.fieldNames;\n\n  var _fillFieldNames2 = fillFieldNames(fieldNames),\n      fieldKey = _fillFieldNames2.key,\n      fieldChildren = _fillFieldNames2.children;\n\n  var mergeChildrenPropName = childrenPropName || fieldChildren; // Get keys\n\n  var syntheticGetKey;\n\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return node[externalGetKey];\n      };\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return externalGetKey(node);\n      };\n    }\n  } else {\n    syntheticGetKey = function syntheticGetKey(node, pos) {\n      return getKey(node[fieldKey], pos);\n    };\n  } // Process\n\n\n  function processNode(node, index, parent, pathNodes) {\n    var children = node ? node[mergeChildrenPropName] : dataNodes;\n    var pos = node ? getPosition(parent.pos, index) : '0';\n    var connectNodes = node ? [].concat(_toConsumableArray(pathNodes), [node]) : []; // Process node if is not root\n\n    if (node) {\n      var key = syntheticGetKey(node, pos);\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1,\n        nodes: connectNodes\n      };\n      callback(data);\n    } // Process children node\n\n\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        }, connectNodes);\n      });\n    }\n  }\n\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\n\nexport function convertDataToEntities(dataNodes) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      initWrapper = _ref2.initWrapper,\n      processEntity = _ref2.processEntity,\n      onProcessFinished = _ref2.onProcessFinished,\n      externalGetKey = _ref2.externalGetKey,\n      childrenPropName = _ref2.childrenPropName,\n      fieldNames = _ref2.fieldNames;\n\n  var\n  /** @deprecated Use `config.externalGetKey` instead */\n  legacyExternalGetKey = arguments.length > 2 ? arguments[2] : undefined; // Init config\n\n  var mergedExternalGetKey = externalGetKey || legacyExternalGetKey;\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n        index = item.index,\n        pos = item.pos,\n        key = item.key,\n        parentPos = item.parentPos,\n        level = item.level,\n        nodes = item.nodes;\n    var entity = {\n      node: node,\n      nodes: nodes,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity; // Fill children\n\n    entity.parent = posEntities[parentPos];\n\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, {\n    externalGetKey: mergedExternalGetKey,\n    childrenPropName: childrenPropName,\n    fieldNames: fieldNames\n  });\n\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\n\nexport function getTreeNodeProps(key, _ref3) {\n  var expandedKeysSet = _ref3.expandedKeysSet,\n      selectedKeysSet = _ref3.selectedKeysSet,\n      loadedKeysSet = _ref3.loadedKeysSet,\n      loadingKeysSet = _ref3.loadingKeysSet,\n      checkedKeysSet = _ref3.checkedKeysSet,\n      halfCheckedKeysSet = _ref3.halfCheckedKeysSet,\n      dragOverNodeKey = _ref3.dragOverNodeKey,\n      dropPosition = _ref3.dropPosition,\n      keyEntities = _ref3.keyEntities;\n  var entity = keyEntities[key];\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeysSet.has(key),\n    selected: selectedKeysSet.has(key),\n    loaded: loadedKeysSet.has(key),\n    loading: loadingKeysSet.has(key),\n    checked: checkedKeysSet.has(key),\n    halfChecked: halfCheckedKeysSet.has(key),\n    pos: String(entity ? entity.pos : ''),\n    parent: entity.parent,\n    // [Legacy] Drag props\n    // Since the interaction of drag is changed, the semantic of the props are\n    // not accuracy, I think it should be finally removed\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\nexport function convertNodePropsToEventData(props) {\n  var data = props.data,\n      expanded = props.expanded,\n      selected = props.selected,\n      checked = props.checked,\n      loaded = props.loaded,\n      loading = props.loading,\n      halfChecked = props.halfChecked,\n      dragOver = props.dragOver,\n      dragOverGapTop = props.dragOverGapTop,\n      dragOverGapBottom = props.dragOverGapBottom,\n      pos = props.pos,\n      active = props.active,\n      eventKey = props.eventKey;\n\n  var eventData = _extends(_extends({\n    dataRef: data\n  }, data), {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active,\n    eventKey: eventKey,\n    key: eventKey\n  });\n\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        warning(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n\n  return eventData;\n}","map":{"version":3,"names":["_typeof","_toConsumableArray","_extends","_slicedToArray","__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","getPosition","isTreeNode","warning","camelize","filterEmpty","omit","getKey","key","pos","undefined","fillFieldNames","fieldNames","_ref","title","_title","children","mergedTitle","warningWithoutKey","treeData","keys","Map","dig","list","path","arguments","forEach","treeNode","concat","recordKey","String","has","set","convertTreeToData","rootNodes","node","treeNodes","map","_a","_b","_c","_d","slots","props","_i","_Object$entries","entries","_Object$entries$_i","k","v","isLeaf","checkable","selectable","disabled","disableCheckbox","newProps","slotsProps","_props$title","_props$icon","icon","_props$switcherIcon","switcherIcon","rest","dataNode","parsedChildren","flattenTreeData","treeNodeList","expandedKeys","_fillFieldNames","fieldTitles","fieldKey","fieldChildren","expandedKeySet","Set","flattenList","parent","index","mergedKey","fieldTitle","flattenNode","data","isStart","isEnd","push","traverseDataNodes","dataNodes","callback","config","mergedConfig","externalGetKey","_mergedConfig","childrenPropName","_fillFieldNames2","mergeChildrenPropName","syntheticGetKey","processNode","pathNodes","connectNodes","parentPos","level","nodes","subNode","subIndex","convertDataToEntities","_ref2","initWrapper","processEntity","onProcessFinished","legacyExternalGetKey","mergedExternalGetKey","posEntities","keyEntities","wrapper","item","entity","getTreeNodeProps","_ref3","expandedKeysSet","selectedKeysSet","loadedKeysSet","loadingKeysSet","checkedKeysSet","halfCheckedKeysSet","dragOverNodeKey","dropPosition","treeNodeProps","eventKey","expanded","selected","loaded","loading","checked","halfChecked","dragOver","dragOverGapTop","dragOverGapBottom","convertNodePropsToEventData","active","eventData","dataRef","defineProperty","get"],"sources":["/home/orange/Desktop/project-catalog-antd/node_modules/ant-design-vue/es/vc-tree/utils/treeUtil.js"],"sourcesContent":["import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { getPosition, isTreeNode } from '../util';\nimport { warning } from '../../vc-util/warning';\nimport { camelize } from 'vue';\nimport { filterEmpty } from '../../_util/props-util';\nimport omit from '../../_util/omit';\nexport function getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n\n  return pos;\n}\nexport function fillFieldNames(fieldNames) {\n  var _ref = fieldNames || {},\n      title = _ref.title,\n      _title = _ref._title,\n      key = _ref.key,\n      children = _ref.children;\n\n  var mergedTitle = title || 'title';\n  return {\n    title: mergedTitle,\n    _title: _title || [mergedTitle],\n    key: key || 'key',\n    children: children || 'children'\n  };\n}\n/**\n * Warning if TreeNode do not provides key\n */\n\nexport function warningWithoutKey(treeData, fieldNames) {\n  var keys = new Map();\n\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode[fieldNames.key];\n      var children = treeNode[fieldNames.children];\n      warning(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      warning(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n\n  dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\n\nexport function convertTreeToData(rootNodes) {\n  function dig() {\n    var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var treeNodes = filterEmpty(node);\n    return treeNodes.map(function (treeNode) {\n      var _a, _b, _c, _d; // Filter invalidate node\n\n\n      if (!isTreeNode(treeNode)) {\n        warning(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n\n      var slots = treeNode.children || {};\n      var key = treeNode.key;\n      var props = {};\n\n      for (var _i = 0, _Object$entries = Object.entries(treeNode.props); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            k = _Object$entries$_i[0],\n            v = _Object$entries$_i[1];\n\n        props[camelize(k)] = v;\n      }\n\n      var isLeaf = props.isLeaf,\n          checkable = props.checkable,\n          selectable = props.selectable,\n          disabled = props.disabled,\n          disableCheckbox = props.disableCheckbox; // 默认值为 undefined\n\n      var newProps = {\n        isLeaf: isLeaf || isLeaf === '' || undefined,\n        checkable: checkable || checkable === '' || undefined,\n        selectable: selectable || selectable === '' || undefined,\n        disabled: disabled || disabled === '' || undefined,\n        disableCheckbox: disableCheckbox || disableCheckbox === '' || undefined\n      };\n\n      var slotsProps = _extends(_extends({}, props), newProps);\n\n      var _props$title = props.title,\n          title = _props$title === void 0 ? (_a = slots.title) === null || _a === void 0 ? void 0 : _a.call(slots, slotsProps) : _props$title,\n          _props$icon = props.icon,\n          icon = _props$icon === void 0 ? (_b = slots.icon) === null || _b === void 0 ? void 0 : _b.call(slots, slotsProps) : _props$icon,\n          _props$switcherIcon = props.switcherIcon,\n          switcherIcon = _props$switcherIcon === void 0 ? (_c = slots.switcherIcon) === null || _c === void 0 ? void 0 : _c.call(slots, slotsProps) : _props$switcherIcon,\n          rest = __rest(props, [\"title\", \"icon\", \"switcherIcon\"]);\n\n      var children = (_d = slots.default) === null || _d === void 0 ? void 0 : _d.call(slots);\n\n      var dataNode = _extends(_extends(_extends({}, rest), {\n        title: title,\n        icon: icon,\n        switcherIcon: switcherIcon,\n        key: key,\n        isLeaf: isLeaf\n      }), newProps);\n\n      var parsedChildren = dig(children);\n\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n\n      return dataNode;\n    });\n  }\n\n  return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\n\nexport function flattenTreeData(treeNodeList, expandedKeys, fieldNames) {\n  var _fillFieldNames = fillFieldNames(fieldNames),\n      fieldTitles = _fillFieldNames._title,\n      fieldKey = _fillFieldNames.key,\n      fieldChildren = _fillFieldNames.children;\n\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = getPosition(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode[fieldKey], pos); // Pick matched title in field title list\n\n      var mergedTitle;\n\n      for (var i = 0; i < fieldTitles.length; i += 1) {\n        var fieldTitle = fieldTitles[i];\n\n        if (treeNode[fieldTitle] !== undefined) {\n          mergedTitle = treeNode[fieldTitle];\n          break;\n        }\n      } // Add FlattenDataNode into list\n\n\n      var flattenNode = _extends(_extends({}, omit(treeNode, [].concat(_toConsumableArray(fieldTitles), [fieldKey, fieldChildren]))), {\n        title: mergedTitle,\n        key: mergedKey,\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat(_toConsumableArray(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat(_toConsumableArray(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n\n      flattenList.push(flattenNode); // Loop treeNode children\n\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode[fieldChildren] || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n\n      return flattenNode;\n    });\n  }\n\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\n\nexport function traverseDataNodes(dataNodes, callback, // To avoid too many params, let use config instead of origin param\nconfig) {\n  var mergedConfig = {};\n\n  if (_typeof(config) === 'object') {\n    mergedConfig = config;\n  } else {\n    mergedConfig = {\n      externalGetKey: config\n    };\n  }\n\n  mergedConfig = mergedConfig || {}; // Init config\n\n  var _mergedConfig = mergedConfig,\n      childrenPropName = _mergedConfig.childrenPropName,\n      externalGetKey = _mergedConfig.externalGetKey,\n      fieldNames = _mergedConfig.fieldNames;\n\n  var _fillFieldNames2 = fillFieldNames(fieldNames),\n      fieldKey = _fillFieldNames2.key,\n      fieldChildren = _fillFieldNames2.children;\n\n  var mergeChildrenPropName = childrenPropName || fieldChildren; // Get keys\n\n  var syntheticGetKey;\n\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return node[externalGetKey];\n      };\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return externalGetKey(node);\n      };\n    }\n  } else {\n    syntheticGetKey = function syntheticGetKey(node, pos) {\n      return getKey(node[fieldKey], pos);\n    };\n  } // Process\n\n\n  function processNode(node, index, parent, pathNodes) {\n    var children = node ? node[mergeChildrenPropName] : dataNodes;\n    var pos = node ? getPosition(parent.pos, index) : '0';\n    var connectNodes = node ? [].concat(_toConsumableArray(pathNodes), [node]) : []; // Process node if is not root\n\n    if (node) {\n      var key = syntheticGetKey(node, pos);\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1,\n        nodes: connectNodes\n      };\n      callback(data);\n    } // Process children node\n\n\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        }, connectNodes);\n      });\n    }\n  }\n\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\n\nexport function convertDataToEntities(dataNodes) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      initWrapper = _ref2.initWrapper,\n      processEntity = _ref2.processEntity,\n      onProcessFinished = _ref2.onProcessFinished,\n      externalGetKey = _ref2.externalGetKey,\n      childrenPropName = _ref2.childrenPropName,\n      fieldNames = _ref2.fieldNames;\n\n  var\n  /** @deprecated Use `config.externalGetKey` instead */\n  legacyExternalGetKey = arguments.length > 2 ? arguments[2] : undefined;\n  // Init config\n  var mergedExternalGetKey = externalGetKey || legacyExternalGetKey;\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n        index = item.index,\n        pos = item.pos,\n        key = item.key,\n        parentPos = item.parentPos,\n        level = item.level,\n        nodes = item.nodes;\n    var entity = {\n      node: node,\n      nodes: nodes,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity; // Fill children\n\n    entity.parent = posEntities[parentPos];\n\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, {\n    externalGetKey: mergedExternalGetKey,\n    childrenPropName: childrenPropName,\n    fieldNames: fieldNames\n  });\n\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\n\nexport function getTreeNodeProps(key, _ref3) {\n  var expandedKeysSet = _ref3.expandedKeysSet,\n      selectedKeysSet = _ref3.selectedKeysSet,\n      loadedKeysSet = _ref3.loadedKeysSet,\n      loadingKeysSet = _ref3.loadingKeysSet,\n      checkedKeysSet = _ref3.checkedKeysSet,\n      halfCheckedKeysSet = _ref3.halfCheckedKeysSet,\n      dragOverNodeKey = _ref3.dragOverNodeKey,\n      dropPosition = _ref3.dropPosition,\n      keyEntities = _ref3.keyEntities;\n  var entity = keyEntities[key];\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeysSet.has(key),\n    selected: selectedKeysSet.has(key),\n    loaded: loadedKeysSet.has(key),\n    loading: loadingKeysSet.has(key),\n    checked: checkedKeysSet.has(key),\n    halfChecked: halfCheckedKeysSet.has(key),\n    pos: String(entity ? entity.pos : ''),\n    parent: entity.parent,\n    // [Legacy] Drag props\n    // Since the interaction of drag is changed, the semantic of the props are\n    // not accuracy, I think it should be finally removed\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\nexport function convertNodePropsToEventData(props) {\n  var data = props.data,\n      expanded = props.expanded,\n      selected = props.selected,\n      checked = props.checked,\n      loaded = props.loaded,\n      loading = props.loading,\n      halfChecked = props.halfChecked,\n      dragOver = props.dragOver,\n      dragOverGapTop = props.dragOverGapTop,\n      dragOverGapBottom = props.dragOverGapBottom,\n      pos = props.pos,\n      active = props.active,\n      eventKey = props.eventKey;\n\n  var eventData = _extends(_extends({\n    dataRef: data\n  }, data), {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active,\n    eventKey: eventKey,\n    key: eventKey\n  });\n\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        warning(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n\n  return eventData;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}